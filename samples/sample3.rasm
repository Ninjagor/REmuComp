_START
    ; Store "hello" string into RAM at some location
    STRS R7, "hello", 0xE001
    PRINT R7, 1       ; print address for debug

    ; Set up string pointer in R0 (start address of string in RAM)
    MOVI R0, R7

    ; Starting x, y position for drawing text
    MOVI R1, 10       ; x
    MOVI R2, 15       ; y

_LOOP_CHAR
    ; Load byte from RAM at [R0]
    LOADB R3, R0      ; load current char

    ; Debug print char code
    PRINT R3, 0

    ; Check if null terminator
    CMP R3, 0
    JE _END_LOOP

    ; Check if char is between 'a' (97) and 'z' (122)
    MOVI R4, 97
    CMP R3, R4
    JL _SKIP_CHAR

    MOVI R4, 122
    CMP R3, R4
    JG _SKIP_CHAR

    ; Calculate sprite index: char - 87 ('a'->10)
    MOVI R4, 87
    SUB R4, R3, R4

    ; Draw sprite at (R1, R2)
    STRB R4, R1, R2

    ; Increment x by sprite width (8)
    MOVI R5, 8
    ADD R1, R1, R5

    JMP _INC_PTR

_SKIP_CHAR
    ; Skip drawing, but still increment x by 8 to keep spacing
    MOVI R5, 8
    ADD R1, R1, R5

_INC_PTR
    ; Increment string pointer
    MOVI R6, 1
    ADD R0, R0, R6

    JMP _LOOP_CHAR

_END_LOOP
    ; Infinite loop to keep screen displayed
    JMP _END_LOOP
